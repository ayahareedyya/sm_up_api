version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sm_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl:ro
      - storage_data:/app/storage:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - sm_network

  # Main API service
  api:
    build: .
    container_name: sm_api
    environment:
      - DATABASE_URL=postgresql://sm_user:sm_password@postgres:5432/sm_image_api
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_API_KEY=${FRONTEND_API_KEY}
      - FLUX_MODEL_PATH=/app/models/flux-dev
      - LORA_MODEL_PATH=/app/models/lora-upscale
      - STORAGE_PATH=/app/storage
      - STORAGE_URL_PREFIX=https://api.yourdomain.com/files
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - storage_data:/app/storage
      - models_data:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - sm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/simple"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for image processing
  worker:
    build: .
    container_name: sm_worker
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=1 -Q image_processing
    environment:
      - DATABASE_URL=postgresql://sm_user:sm_password@postgres:5432/sm_image_api
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLUX_MODEL_PATH=/app/models/flux
      - LORA_MODEL_PATH=/app/models/lora-upscale
      - STORAGE_PATH=/app/storage
      - TORCH_DEVICE=auto  # Auto-detect CPU/GPU
      - GPU_MEMORY_FRACTION=0.9
      - LOG_LEVEL=INFO
    volumes:
      - storage_data:/app/storage
      - models_data:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    # GPU support (commented out for CPU-only servers)
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - sm_network

  # Celery worker for cleanup tasks
  worker-cleanup:
    build: .
    container_name: sm_worker_cleanup
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=2 -Q cleanup
    environment:
      - DATABASE_URL=postgresql://sm_user:sm_password@postgres:5432/sm_image_api
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - STORAGE_PATH=/app/storage
      - LOG_LEVEL=INFO
    volumes:
      - storage_data:/app/storage
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - sm_network

  # Celery beat scheduler
  scheduler:
    build: .
    container_name: sm_scheduler
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://sm_user:sm_password@postgres:5432/sm_image_api
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - sm_network

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: sm_postgres
    environment:
      - POSTGRES_DB=sm_image_api
      - POSTGRES_USER=sm_user
      - POSTGRES_PASSWORD=sm_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"  # Remove in production
    restart: unless-stopped
    networks:
      - sm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sm_user -d sm_image_api"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    container_name: sm_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Remove in production
    restart: unless-stopped
    networks:
      - sm_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sm_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - sm_network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sm_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - sm_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
  models_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sm_network:
    driver: bridge
